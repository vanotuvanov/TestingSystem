@page "/fetchdata"
@inject HttpClient Http
@inject NavigationManager _nav
@using TestDeveloper.API
@using TestDeveloper.API.DTO;
@using TestDeveloper.Domen
@inject IJSRuntime jsRuntime

<PageTitle>Список тестов</PageTitle>


@if (tests != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>№</th>
                <th>Название</th>
                <th>Описание</th>
                <th>Количество вопросов</th>
                <th>Количество попыток</th>
            </tr>
        </thead>
        <tbody>


            @foreach (var test in tests)
            {
                    <tr>
                    <td>@(++count)</td>
                    <td><Button style="background-color:white; text-decoration:underline; border-style:none; color:blue" @onclick="@(()=>_nav.NavigateTo($"/test/{test.Id.ToString()}"))">@test.Name</Button></td>
                    <td>@test.Description </td>
                    <td>@test.OptionDTO.NumberOfQuestions </td>
                    <td>@test.OptionDTO.NumberOfEttemps </td>
                    <td><button @onclick="() => DeleteTest(test.Id)">X</button></td>
                </tr>
            }
        </tbody>
    </table>
    <font color="white">@(count = 0)</font>

}

@code {
    private ElementReference _element;
    private int count = 0;
    private IEnumerable<KnowledgeTestDTO> tests;

    protected override async Task OnParametersSetAsync() =>
    tests = await Http.GetFromJsonAsync<KnowledgeTestDTO[]>
        ("https://localhost:8001/api/test");

    protected async void DeleteTest(Guid id)
    {
        var uri = Path.Combine("https://localhost:8001/api/test", id.ToString());
        await Http.DeleteAsync(uri);
        tests = tests.Where(c => c.Id != id).ToList();
        StateHasChanged();
       // ((IJSInProcessRuntime)jsRuntime).InvokeVoid("ShowAlert", "спасите");
    }
}
