// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestDeveloper.Infrastructure;

#nullable disable

namespace TestDeveloper.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220714082339_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TestDeveloper.Domen.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Answers", (string)null);
                });

            modelBuilder.Entity("TestDeveloper.Domen.KnowledgeTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KnowledgeTests");
                });

            modelBuilder.Entity("TestDeveloper.Domen.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KnowledgeTestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfEttemps")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfQuestions")
                        .HasColumnType("int");

                    b.Property<int>("TestTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeTestId")
                        .IsUnique();

                    b.ToTable("Option");
                });

            modelBuilder.Entity("TestDeveloper.Domen.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("KnowledgeTestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeTestId");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("TestDeveloper.Domen.MultipleCaseAnswer", b =>
                {
                    b.HasBaseType("TestDeveloper.Domen.Answer");

                    b.Property<Guid?>("MultipleCaseQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TrueVarriant")
                        .HasColumnType("bit");

                    b.HasIndex("MultipleCaseQuestionId");

                    b.ToTable("MultipleCaseAnswers", (string)null);
                });

            modelBuilder.Entity("TestDeveloper.Domen.MultipleCaseQuestion", b =>
                {
                    b.HasBaseType("TestDeveloper.Domen.Question");

                    b.Property<int>("test")
                        .HasColumnType("int");

                    b.ToTable("MultipleCaseQuestions", (string)null);
                });

            modelBuilder.Entity("TestDeveloper.Domen.SingleCaseAnswer", b =>
                {
                    b.HasBaseType("TestDeveloper.Domen.Answer");

                    b.Property<Guid?>("SingleCaseQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TrueVarriant")
                        .HasColumnType("bit");

                    b.HasIndex("SingleCaseQuestionId");

                    b.ToTable("SingleCaseAnswers", (string)null);
                });

            modelBuilder.Entity("TestDeveloper.Domen.SingleCaseQuestion", b =>
                {
                    b.HasBaseType("TestDeveloper.Domen.Question");

                    b.ToTable("SingleCaseQuestions", (string)null);
                });

            modelBuilder.Entity("TestDeveloper.Domen.Option", b =>
                {
                    b.HasOne("TestDeveloper.Domen.KnowledgeTest", "KnowledgeTest")
                        .WithOne("Option")
                        .HasForeignKey("TestDeveloper.Domen.Option", "KnowledgeTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KnowledgeTest");
                });

            modelBuilder.Entity("TestDeveloper.Domen.Question", b =>
                {
                    b.HasOne("TestDeveloper.Domen.KnowledgeTest", "KnowledgeTest")
                        .WithMany("Questions")
                        .HasForeignKey("KnowledgeTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KnowledgeTest");
                });

            modelBuilder.Entity("TestDeveloper.Domen.MultipleCaseAnswer", b =>
                {
                    b.HasOne("TestDeveloper.Domen.Answer", null)
                        .WithOne()
                        .HasForeignKey("TestDeveloper.Domen.MultipleCaseAnswer", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("TestDeveloper.Domen.MultipleCaseQuestion", null)
                        .WithMany("MultipleCaseAnswers")
                        .HasForeignKey("MultipleCaseQuestionId");
                });

            modelBuilder.Entity("TestDeveloper.Domen.MultipleCaseQuestion", b =>
                {
                    b.HasOne("TestDeveloper.Domen.Question", null)
                        .WithOne()
                        .HasForeignKey("TestDeveloper.Domen.MultipleCaseQuestion", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestDeveloper.Domen.SingleCaseAnswer", b =>
                {
                    b.HasOne("TestDeveloper.Domen.Answer", null)
                        .WithOne()
                        .HasForeignKey("TestDeveloper.Domen.SingleCaseAnswer", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("TestDeveloper.Domen.SingleCaseQuestion", null)
                        .WithMany("SingleCaseAnswers")
                        .HasForeignKey("SingleCaseQuestionId");
                });

            modelBuilder.Entity("TestDeveloper.Domen.SingleCaseQuestion", b =>
                {
                    b.HasOne("TestDeveloper.Domen.Question", null)
                        .WithOne()
                        .HasForeignKey("TestDeveloper.Domen.SingleCaseQuestion", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestDeveloper.Domen.KnowledgeTest", b =>
                {
                    b.Navigation("Option")
                        .IsRequired();

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("TestDeveloper.Domen.MultipleCaseQuestion", b =>
                {
                    b.Navigation("MultipleCaseAnswers");
                });

            modelBuilder.Entity("TestDeveloper.Domen.SingleCaseQuestion", b =>
                {
                    b.Navigation("SingleCaseAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
